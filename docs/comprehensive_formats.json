[
  {
    "name": "INT8",
    "category": "integer",
    "bits_total": 8,
    "signed": true,
    "range": "-128 to 127",
    "values": "256",
    "structure": {
      "sign_bits": 1,
      "exponent_bits": null,
      "mantissa_bits": null,
      "bias": null,
      "specials": { "zeros": "true", "infinities": false, "nans": false, "subnormals": false }
    },
    "bit_split": "SBBBBBBB",
    "governance": { "type": "de-facto", "owner": "ISO C/C++", "status": "standardized", "notes": "Two's complement" },
    "language_support": [
      { "language": "C", "native_support": "int8_t", "header": "<stdint.h>", "standard": "C99+", "notes": "signed char is also 8-bit but int8_t is explicit" },
      { "language": "C++", "native_support": "int8_t", "header": "<cstdint>", "standard": "C++11+", "notes": "Also std::int8_t" },
      { "language": "C#", "native_support": "sbyte", "namespace": "System", "version": ".NET 1.0+", "notes": "Signed byte" },
      { "language": "Java", "native_support": "byte", "version": "1.0+", "notes": "Always signed in Java" },
      { "language": "Go", "native_support": "int8", "package": "builtin", "version": "1.0+", "notes": "Guaranteed 8-bit signed" },
      { "language": "Rust", "native_support": "i8", "version": "1.0+", "notes": "Primitive type" },
      { "language": "Python", "native_support": "none", "library": "NumPy", "type": "np.int8", "notes": "Via NumPy array dtype" },
      { "language": "Haskell", "native_support": "Int8", "module": "Data.Int", "notes": "Explicitly 8-bit signed" },
      { "language": "JavaScript", "native_support": "none", "library": "TypedArray", "type": "Int8Array", "standard": "ES6+", "notes": "Array buffer view" },
      { "language": "Excel Lambda", "native_support": "none", "notes": "No explicit 8-bit integer support" },
      { "language": "CUDA", "native_support": "char", "version": "all", "notes": "signed char is 8-bit" },
      { "language": "Maple", "native_support": "none", "notes": "Uses arbitrary precision integers" },
      { "language": "Julia", "native_support": "Int8", "version": "0.1+", "notes": "Primitive type" },
      { "language": "Wolfram", "native_support": "none", "notes": "Uses arbitrary precision, but can specify via ByteArray" },
      { "language": "R", "native_support": "none", "notes": "Integers are 32-bit, no native 8-bit" }
    ],
    "links": [
      { "text": "C stdint.h", "url": "https://en.cppreference.com/w/c/types/integer" }
    ]
  },
  {
    "name": "UINT8",
    "category": "integer",
    "bits_total": 8,
    "signed": false,
    "range": "0 to 255",
    "values": "256",
    "structure": {
      "sign_bits": 0,
      "exponent_bits": null,
      "mantissa_bits": null,
      "bias": null,
      "specials": { "zeros": "true", "infinities": false, "nans": false, "subnormals": false }
    },
    "bit_split": "BBBBBBBB",
    "governance": { "type": "de-facto", "owner": "ISO C/C++", "status": "standardized", "notes": "Unsigned binary" },
    "language_support": [
      { "language": "C", "native_support": "uint8_t", "header": "<stdint.h>", "standard": "C99+", "notes": "unsigned char also works" },
      { "language": "C++", "native_support": "uint8_t", "header": "<cstdint>", "standard": "C++11+", "notes": "std::uint8_t" },
      { "language": "C#", "native_support": "byte", "namespace": "System", "version": ".NET 1.0+", "notes": "Unsigned 8-bit" },
      { "language": "Java", "native_support": "none", "notes": "No unsigned byte, use byte with unsigned operations" },
      { "language": "Go", "native_support": "uint8", "package": "builtin", "version": "1.0+", "notes": "Also 'byte' is alias" },
      { "language": "Rust", "native_support": "u8", "version": "1.0+", "notes": "Primitive type" },
      { "language": "Python", "native_support": "none", "library": "NumPy", "type": "np.uint8", "notes": "Via NumPy" },
      { "language": "Haskell", "native_support": "Word8", "module": "Data.Word", "notes": "Unsigned 8-bit" },
      { "language": "JavaScript", "native_support": "none", "library": "TypedArray", "type": "Uint8Array", "standard": "ES6+", "notes": "Array buffer view" },
      { "language": "Excel Lambda", "native_support": "none", "notes": "No explicit support" },
      { "language": "CUDA", "native_support": "unsigned char", "version": "all", "notes": "8-bit unsigned" },
      { "language": "Maple", "native_support": "none", "notes": "Arbitrary precision only" },
      { "language": "Julia", "native_support": "UInt8", "version": "0.1+", "notes": "Primitive type" },
      { "language": "Wolfram", "native_support": "none", "notes": "Via ByteArray" },
      { "language": "R", "native_support": "none", "library": "raw", "notes": "raw type is unsigned byte" }
    ],
    "links": []
  },
  {
    "name": "INT16",
    "category": "integer",
    "bits_total": 16,
    "signed": true,
    "range": "-32768 to 32767",
    "values": "65536",
    "structure": {
      "sign_bits": 1,
      "exponent_bits": null,
      "mantissa_bits": null,
      "bias": null,
      "specials": { "zeros": "true", "infinities": false, "nans": false, "subnormals": false }
    },
    "bit_split": "SBBBBBBBBBBBBBB",
    "governance": { "type": "de-facto", "owner": "ISO C/C++", "status": "standardized", "notes": "Two's complement" },
    "language_support": [
      { "language": "C", "native_support": "int16_t", "header": "<stdint.h>", "standard": "C99+", "notes": "short is typically 16-bit" },
      { "language": "C++", "native_support": "int16_t", "header": "<cstdint>", "standard": "C++11+", "notes": "std::int16_t" },
      { "language": "C#", "native_support": "short", "namespace": "System", "version": ".NET 1.0+", "notes": "System.Int16" },
      { "language": "Java", "native_support": "short", "version": "1.0+", "notes": "Always 16-bit signed" },
      { "language": "Go", "native_support": "int16", "package": "builtin", "version": "1.0+", "notes": "Guaranteed 16-bit" },
      { "language": "Rust", "native_support": "i16", "version": "1.0+", "notes": "Primitive type" },
      { "language": "Python", "native_support": "none", "library": "NumPy", "type": "np.int16", "notes": "Via NumPy" },
      { "language": "Haskell", "native_support": "Int16", "module": "Data.Int", "notes": "Explicitly 16-bit" },
      { "language": "JavaScript", "native_support": "none", "library": "TypedArray", "type": "Int16Array", "standard": "ES6+", "notes": "Array buffer view" },
      { "language": "Excel Lambda", "native_support": "none", "notes": "No explicit support" },
      { "language": "CUDA", "native_support": "short", "version": "all", "notes": "16-bit signed" },
      { "language": "Maple", "native_support": "none", "notes": "Arbitrary precision" },
      { "language": "Julia", "native_support": "Int16", "version": "0.1+", "notes": "Primitive type" },
      { "language": "Wolfram", "native_support": "none", "notes": "Arbitrary precision default" },
      { "language": "R", "native_support": "none", "notes": "No native 16-bit integer" }
    ],
    "links": []
  },
  {
    "name": "UINT16",
    "category": "integer",
    "bits_total": 16,
    "signed": false,
    "range": "0 to 65535",
    "values": "65536",
    "structure": {
      "sign_bits": 0,
      "exponent_bits": null,
      "mantissa_bits": null,
      "bias": null,
      "specials": { "zeros": "true", "infinities": false, "nans": false, "subnormals": false }
    },
    "bit_split": "BBBBBBBBBBBBBBBB",
    "governance": { "type": "de-facto", "owner": "ISO C/C++", "status": "standardized", "notes": "Unsigned" },
    "language_support": [
      { "language": "C", "native_support": "uint16_t", "header": "<stdint.h>", "standard": "C99+", "notes": "unsigned short" },
      { "language": "C++", "native_support": "uint16_t", "header": "<cstdint>", "standard": "C++11+", "notes": "std::uint16_t" },
      { "language": "C#", "native_support": "ushort", "namespace": "System", "version": ".NET 1.0+", "notes": "System.UInt16" },
      { "language": "Java", "native_support": "char", "version": "1.0+", "notes": "char is unsigned 16-bit for Unicode" },
      { "language": "Go", "native_support": "uint16", "package": "builtin", "version": "1.0+", "notes": "Unsigned 16-bit" },
      { "language": "Rust", "native_support": "u16", "version": "1.0+", "notes": "Primitive type" },
      { "language": "Python", "native_support": "none", "library": "NumPy", "type": "np.uint16", "notes": "Via NumPy" },
      { "language": "Haskell", "native_support": "Word16", "module": "Data.Word", "notes": "Unsigned 16-bit" },
      { "language": "JavaScript", "native_support": "none", "library": "TypedArray", "type": "Uint16Array", "standard": "ES6+", "notes": "Array buffer" },
      { "language": "Excel Lambda", "native_support": "none", "notes": "No explicit support" },
      { "language": "CUDA", "native_support": "unsigned short", "version": "all", "notes": "16-bit unsigned" },
      { "language": "Maple", "native_support": "none", "notes": "Arbitrary precision" },
      { "language": "Julia", "native_support": "UInt16", "version": "0.1+", "notes": "Primitive type" },
      { "language": "Wolfram", "native_support": "none", "notes": "Arbitrary precision" },
      { "language": "R", "native_support": "none", "notes": "No native support" }
    ],
    "links": []
  },
  {
    "name": "INT32",
    "category": "integer",
    "bits_total": 32,
    "signed": true,
    "range": "-2147483648 to 2147483647",
    "values": "4294967296",
    "structure": {
      "sign_bits": 1,
      "exponent_bits": null,
      "mantissa_bits": null,
      "bias": null,
      "specials": { "zeros": "true", "infinities": false, "nans": false, "subnormals": false }
    },
    "bit_split": "S + 31 bits",
    "governance": { "type": "de-facto", "owner": "ISO C/C++", "status": "standardized", "notes": "Most common integer size" },
    "language_support": [
      { "language": "C", "native_support": "int32_t", "header": "<stdint.h>", "standard": "C99+", "notes": "int is usually 32-bit" },
      { "language": "C++", "native_support": "int32_t", "header": "<cstdint>", "standard": "C++11+", "notes": "std::int32_t or int" },
      { "language": "C#", "native_support": "int", "namespace": "System", "version": ".NET 1.0+", "notes": "System.Int32" },
      { "language": "Java", "native_support": "int", "version": "1.0+", "notes": "Always 32-bit signed" },
      { "language": "Go", "native_support": "int32", "package": "builtin", "version": "1.0+", "notes": "Explicit 32-bit" },
      { "language": "Rust", "native_support": "i32", "version": "1.0+", "notes": "Primitive, default integer type" },
      { "language": "Python", "native_support": "none", "library": "NumPy", "type": "np.int32", "notes": "Via NumPy, Python int is arbitrary" },
      { "language": "Haskell", "native_support": "Int32", "module": "Data.Int", "notes": "Explicitly 32-bit" },
      { "language": "JavaScript", "native_support": "none", "library": "TypedArray", "type": "Int32Array", "standard": "ES6+", "notes": "Array buffer" },
      { "language": "Excel Lambda", "native_support": "none", "notes": "Numbers are double precision float" },
      { "language": "CUDA", "native_support": "int", "version": "all", "notes": "32-bit signed integer" },
      { "language": "Maple", "native_support": "none", "notes": "Arbitrary precision" },
      { "language": "Julia", "native_support": "Int32", "version": "0.1+", "notes": "Primitive type" },
      { "language": "Wolfram", "native_support": "none", "notes": "Arbitrary precision default" },
      { "language": "R", "native_support": "integer", "notes": "R integers are 32-bit signed" }
    ],
    "links": []
  },
  {
    "name": "UINT32",
    "category": "integer",
    "bits_total": 32,
    "signed": false,
    "range": "0 to 4294967295",
    "values": "4294967296",
    "structure": {
      "sign_bits": 0,
      "exponent_bits": null,
      "mantissa_bits": null,
      "bias": null,
      "specials": { "zeros": "true", "infinities": false, "nans": false, "subnormals": false }
    },
    "bit_split": "32 bits",
    "governance": { "type": "de-facto", "owner": "ISO C/C++", "status": "standardized", "notes": "Unsigned 32-bit" },
    "language_support": [
      { "language": "C", "native_support": "uint32_t", "header": "<stdint.h>", "standard": "C99+", "notes": "unsigned int" },
      { "language": "C++", "native_support": "uint32_t", "header": "<cstdint>", "standard": "C++11+", "notes": "std::uint32_t" },
      { "language": "C#", "native_support": "uint", "namespace": "System", "version": ".NET 1.0+", "notes": "System.UInt32" },
      { "language": "Java", "native_support": "none", "notes": "No unsigned int, use long or unsigned operations" },
      { "language": "Go", "native_support": "uint32", "package": "builtin", "version": "1.0+", "notes": "Also uint is platform-dependent" },
      { "language": "Rust", "native_support": "u32", "version": "1.0+", "notes": "Primitive type" },
      { "language": "Python", "native_support": "none", "library": "NumPy", "type": "np.uint32", "notes": "Via NumPy" },
      { "language": "Haskell", "native_support": "Word32", "module": "Data.Word", "notes": "Unsigned 32-bit" },
      { "language": "JavaScript", "native_support": "none", "library": "TypedArray", "type": "Uint32Array", "standard": "ES6+", "notes": "Array buffer" },
      { "language": "Excel Lambda", "native_support": "none", "notes": "No explicit support" },
      { "language": "CUDA", "native_support": "unsigned int", "version": "all", "notes": "32-bit unsigned" },
      { "language": "Maple", "native_support": "none", "notes": "Arbitrary precision" },
      { "language": "Julia", "native_support": "UInt32", "version": "0.1+", "notes": "Primitive type" },
      { "language": "Wolfram", "native_support": "none", "notes": "Arbitrary precision" },
      { "language": "R", "native_support": "none", "notes": "No native unsigned integers" }
    ],
    "links": []
  },
  {
    "name": "INT64",
    "category": "integer",
    "bits_total": 64,
    "signed": true,
    "range": "-9223372036854775808 to 9223372036854775807",
    "values": "18446744073709551616",
    "structure": {
      "sign_bits": 1,
      "exponent_bits": null,
      "mantissa_bits": null,
      "bias": null,
      "specials": { "zeros": "true", "infinities": false, "nans": false, "subnormals": false }
    },
    "bit_split": "S + 63 bits",
    "governance": { "type": "de-facto", "owner": "ISO C/C++", "status": "standardized", "notes": "64-bit integer" },
    "language_support": [
      { "language": "C", "native_support": "int64_t", "header": "<stdint.h>", "standard": "C99+", "notes": "long long is at least 64-bit" },
      { "language": "C++", "native_support": "int64_t", "header": "<cstdint>", "standard": "C++11+", "notes": "std::int64_t or long long" },
      { "language": "C#", "native_support": "long", "namespace": "System", "version": ".NET 1.0+", "notes": "System.Int64" },
      { "language": "Java", "native_support": "long", "version": "1.0+", "notes": "Always 64-bit signed" },
      { "language": "Go", "native_support": "int64", "package": "builtin", "version": "1.0+", "notes": "Explicit 64-bit" },
      { "language": "Rust", "native_support": "i64", "version": "1.0+", "notes": "Primitive type" },
      { "language": "Python", "native_support": "none", "library": "NumPy", "type": "np.int64", "notes": "Via NumPy" },
      { "language": "Haskell", "native_support": "Int64", "module": "Data.Int", "notes": "Explicitly 64-bit" },
      { "language": "JavaScript", "native_support": "none", "library": "TypedArray", "type": "BigInt64Array", "standard": "ES2020+", "notes": "Also native BigInt for arbitrary precision" },
      { "language": "Excel Lambda", "native_support": "none", "notes": "Limited integer precision in double" },
      { "language": "CUDA", "native_support": "long long", "version": "all", "notes": "64-bit signed" },
      { "language": "Maple", "native_support": "none", "notes": "Arbitrary precision" },
      { "language": "Julia", "native_support": "Int64", "version": "0.1+", "notes": "Default Int on 64-bit systems" },
      { "language": "Wolfram", "native_support": "none", "notes": "Arbitrary precision default" },
      { "language": "R", "native_support": "none", "library": "bit64", "type": "integer64", "notes": "Via bit64 package" }
    ],
    "links": []
  },
  {
    "name": "UINT64",
    "category": "integer",
    "bits_total": 64,
    "signed": false,
    "range": "0 to 18446744073709551615",
    "values": "18446744073709551616",
    "structure": {
      "sign_bits": 0,
      "exponent_bits": null,
      "mantissa_bits": null,
      "bias": null,
      "specials": { "zeros": "true", "infinities": false, "nans": false, "subnormals": false }
    },
    "bit_split": "64 bits",
    "governance": { "type": "de-facto", "owner": "ISO C/C++", "status": "standardized", "notes": "Unsigned 64-bit" },
    "language_support": [
      { "language": "C", "native_support": "uint64_t", "header": "<stdint.h>", "standard": "C99+", "notes": "unsigned long long" },
      { "language": "C++", "native_support": "uint64_t", "header": "<cstdint>", "standard": "C++11+", "notes": "std::uint64_t" },
      { "language": "C#", "native_support": "ulong", "namespace": "System", "version": ".NET 1.0+", "notes": "System.UInt64" },
      { "language": "Java", "native_support": "none", "notes": "No unsigned long, use BigInteger or unsigned operations" },
      { "language": "Go", "native_support": "uint64", "package": "builtin", "version": "1.0+", "notes": "Unsigned 64-bit" },
      { "language": "Rust", "native_support": "u64", "version": "1.0+", "notes": "Primitive type" },
      { "language": "Python", "native_support": "none", "library": "NumPy", "type": "np.uint64", "notes": "Via NumPy" },
      { "language": "Haskell", "native_support": "Word64", "module": "Data.Word", "notes": "Unsigned 64-bit" },
      { "language": "JavaScript", "native_support": "none", "library": "TypedArray", "type": "BigUint64Array", "standard": "ES2020+", "notes": "Array buffer" },
      { "language": "Excel Lambda", "native_support": "none", "notes": "No explicit support" },
      { "language": "CUDA", "native_support": "unsigned long long", "version": "all", "notes": "64-bit unsigned" },
      { "language": "Maple", "native_support": "none", "notes": "Arbitrary precision" },
      { "language": "Julia", "native_support": "UInt64", "version": "0.1+", "notes": "Primitive type" },
      { "language": "Wolfram", "native_support": "none", "notes": "Arbitrary precision" },
      { "language": "R", "native_support": "none", "notes": "No native unsigned integers" }
    ],
    "links": []
  },
  {
    "name": "INT128",
    "category": "integer",
    "bits_total": 128,
    "signed": true,
    "range": "-(2^127) to 2^127-1",
    "values": "2^128",
    "structure": {
      "sign_bits": 1,
      "exponent_bits": null,
      "mantissa_bits": null,
      "bias": null,
      "specials": { "zeros": "true", "infinities": false, "nans": false, "subnormals": false }
    },
    "bit_split": "S + 127 bits",
    "governance": { "type": "vendor", "owner": "GCC, Clang", "status": "compiler extension", "notes": "Not ISO C standard" },
    "language_support": [
      { "language": "C", "native_support": "__int128", "header": "none", "standard": "GCC/Clang extension", "notes": "Not portable, not in MSVC" },
      { "language": "C++", "native_support": "__int128", "header": "none", "standard": "GCC/Clang extension", "notes": "Not in standard, vendor-specific" },
      { "language": "C#", "native_support": "none", "notes": "Use BigInteger for >64-bit" },
      { "language": "Java", "native_support": "none", "notes": "Use BigInteger" },
      { "language": "Go", "native_support": "none", "library": "math/big", "type": "big.Int", "notes": "Use big.Int for >64-bit" },
      { "language": "Rust", "native_support": "i128", "version": "1.26+", "notes": "Native 128-bit signed integer" },
      { "language": "Python", "native_support": "none", "notes": "int is arbitrary precision" },
      { "language": "Haskell", "native_support": "none", "library": "Data.Int", "notes": "No fixed 128-bit, use Integer" },
      { "language": "JavaScript", "native_support": "none", "notes": "Use BigInt for large integers" },
      { "language": "Excel Lambda", "native_support": "none", "notes": "No support" },
      { "language": "CUDA", "native_support": "none", "notes": "No native 128-bit integer" },
      { "language": "Maple", "native_support": "none", "notes": "Arbitrary precision" },
      { "language": "Julia", "native_support": "Int128", "version": "0.3+", "notes": "Native 128-bit signed" },
      { "language": "Wolfram", "native_support": "none", "notes": "Arbitrary precision" },
      { "language": "R", "native_support": "none", "notes": "No 128-bit integer support" }
    ],
    "links": []
  },
  {
    "name": "UINT128",
    "category": "integer",
    "bits_total": 128,
    "signed": false,
    "range": "0 to 2^128-1",
    "values": "2^128",
    "structure": {
      "sign_bits": 0,
      "exponent_bits": null,
      "mantissa_bits": null,
      "bias": null,
      "specials": { "zeros": "true", "infinities": false, "nans": false, "subnormals": false }
    },
    "bit_split": "128 bits",
    "governance": { "type": "vendor", "owner": "GCC, Clang", "status": "compiler extension", "notes": "Not ISO C standard" },
    "language_support": [
      { "language": "C", "native_support": "__uint128_t", "header": "none", "standard": "GCC/Clang extension", "notes": "Not portable" },
      { "language": "C++", "native_support": "__uint128_t", "header": "none", "standard": "GCC/Clang extension", "notes": "Vendor-specific" },
      { "language": "C#", "native_support": "none", "notes": "Use BigInteger" },
      { "language": "Java", "native_support": "none", "notes": "Use BigInteger" },
      { "language": "Go", "native_support": "none", "notes": "Use big.Int" },
      { "language": "Rust", "native_support": "u128", "version": "1.26+", "notes": "Native 128-bit unsigned" },
      { "language": "Python", "native_support": "none", "notes": "int is arbitrary" },
      { "language": "Haskell", "native_support": "none", "notes": "Use Integer for arbitrary" },
      { "language": "JavaScript", "native_support": "none", "notes": "Use BigInt" },
      { "language": "Excel Lambda", "native_support": "none", "notes": "No support" },
      { "language": "CUDA", "native_support": "none", "notes": "No native 128-bit" },
      { "language": "Maple", "native_support": "none", "notes": "Arbitrary precision" },
      { "language": "Julia", "native_support": "UInt128", "version": "0.3+", "notes": "Native 128-bit unsigned" },
      { "language": "Wolfram", "native_support": "none", "notes": "Arbitrary precision" },
      { "language": "R", "native_support": "none", "notes": "No support" }
    ],
    "links": []
  },
  {
    "name": "FP16 (Half)",
    "category": "float",
    "bits_total": 16,
    "signed": true,
    "range": "±65504",
    "values": "~65536",
    "structure": {
      "sign_bits": 1,
      "exponent_bits": 5,
      "mantissa_bits": 10,
      "bias": 15,
      "specials": { "zeros": "true", "infinities": true, "nans": true, "subnormals": true }
    },
    "bit_split": "SEEEEEEMMMMMMMMMM",
    "governance": { "type": "IEEE", "owner": "IEEE 754-2008", "status": "standardized", "notes": "Half precision" },
    "language_support": [
      { "language": "C", "native_support": "_Float16", "header": "none", "standard": "C23, GCC extension", "notes": "Limited compiler support" },
      { "language": "C++", "native_support": "none", "library": "half", "type": "half_float::half", "notes": "Third-party library" },
      { "language": "C#", "native_support": "Half", "namespace": "System", "version": ".NET 5.0+", "notes": "Native support from .NET 5" },
      { "language": "Java", "native_support": "none", "notes": "No native FP16 support" },
      { "language": "Go", "native_support": "none", "notes": "No native FP16 support" },
      { "language": "Rust", "native_support": "none", "library": "half", "type": "f16", "notes": "Via half crate" },
      { "language": "Python", "native_support": "none", "library": "NumPy", "type": "np.float16", "notes": "Via NumPy" },
      { "language": "Haskell", "native_support": "none", "library": "half", "type": "Half", "notes": "Via half package" },
      { "language": "JavaScript", "native_support": "none", "notes": "No native FP16 support" },
      { "language": "Excel Lambda", "native_support": "none", "notes": "No FP16 support" },
      { "language": "CUDA", "native_support": "__half", "version": "7.5+", "notes": "Native half precision type" },
      { "language": "Maple", "native_support": "none", "notes": "Uses arbitrary precision floats" },
      { "language": "Julia", "native_support": "Float16", "version": "0.4+", "notes": "Native FP16 support" },
      { "language": "Wolfram", "native_support": "none", "notes": "Arbitrary precision" },
      { "language": "R", "native_support": "none", "notes": "No FP16 support" }
    ],
    "links": [
      { "text": "IEEE 754-2008", "url": "https://ieeexplore.ieee.org/document/4610935" }
    ]
  },
  {
    "name": "BF16 (BFloat16)",
    "category": "float",
    "bits_total": 16,
    "signed": true,
    "range": "±3.39e38",
    "values": "~32768",
    "structure": {
      "sign_bits": 1,
      "exponent_bits": 8,
      "mantissa_bits": 7,
      "bias": 127,
      "specials": { "zeros": "true", "infinities": true, "nans": true, "subnormals": false }
    },
    "bit_split": "SEEEEEEEEMMMMMMM",
    "governance": { "type": "vendor", "owner": "Google/Intel", "status": "adopted", "notes": "Truncated FP32" },
    "language_support": [
      { "language": "C", "native_support": "none", "notes": "Available via vendor libraries" },
      { "language": "C++", "native_support": "none", "library": "Intel MKL-DNN", "type": "bfloat16", "notes": "Via Intel libraries" },
      { "language": "C#", "native_support": "none", "notes": "No native BF16 support" },
      { "language": "Java", "native_support": "none", "notes": "No native support" },
      { "language": "Go", "native_support": "none", "notes": "No native support" },
      { "language": "Rust", "native_support": "none", "library": "half", "type": "bf16", "notes": "Via half crate" },
      { "language": "Python", "native_support": "none", "library": "TensorFlow/PyTorch", "type": "bfloat16", "notes": "Via ML frameworks" },
      { "language": "Haskell", "native_support": "none", "notes": "No native support" },
      { "language": "JavaScript", "native_support": "none", "notes": "No native support" },
      { "language": "Excel Lambda", "native_support": "none", "notes": "No support" },
      { "language": "CUDA", "native_support": "__nv_bfloat16", "version": "11.0+", "notes": "Native BF16 on Ampere+" },
      { "language": "Maple", "native_support": "none", "notes": "Arbitrary precision" },
      { "language": "Julia", "native_support": "none", "library": "BFloat16s.jl", "type": "BFloat16", "notes": "Via package" },
      { "language": "Wolfram", "native_support": "none", "notes": "Arbitrary precision" },
      { "language": "R", "native_support": "none", "notes": "No support" }
    ],
    "links": []
  },
  {
    "name": "FP32 (Float)",
    "category": "float",
    "bits_total": 32,
    "signed": true,
    "range": "±3.4e38",
    "values": "~4.3 billion",
    "structure": {
      "sign_bits": 1,
      "exponent_bits": 8,
      "mantissa_bits": 23,
      "bias": 127,
      "specials": { "zeros": "true", "infinities": true, "nans": true, "subnormals": true }
    },
    "bit_split": "SEEEEEEEEMMMMMMMMMMMMMMMMMMMMMMM",
    "governance": { "type": "IEEE", "owner": "IEEE 754", "status": "standardized", "notes": "Single precision" },
    "language_support": [
      { "language": "C", "native_support": "float", "header": "<float.h>", "standard": "C89+", "notes": "Standard 32-bit float" },
      { "language": "C++", "native_support": "float", "header": "<cfloat>", "standard": "C++98+", "notes": "Standard float" },
      { "language": "C#", "native_support": "float", "namespace": "System", "version": ".NET 1.0+", "notes": "System.Single" },
      { "language": "Java", "native_support": "float", "version": "1.0+", "notes": "Always 32-bit IEEE 754" },
      { "language": "Go", "native_support": "float32", "package": "builtin", "version": "1.0+", "notes": "IEEE 754 32-bit" },
      { "language": "Rust", "native_support": "f32", "version": "1.0+", "notes": "Primitive IEEE 754 type" },
      { "language": "Python", "native_support": "none", "library": "NumPy", "type": "np.float32", "notes": "Via NumPy, float is 64-bit" },
      { "language": "Haskell", "native_support": "Float", "module": "Prelude", "notes": "IEEE 754 single precision" },
      { "language": "JavaScript", "native_support": "none", "library": "TypedArray", "type": "Float32Array", "notes": "Number is 64-bit" },
      { "language": "Excel Lambda", "native_support": "none", "notes": "Uses double precision" },
      { "language": "CUDA", "native_support": "float", "version": "all", "notes": "IEEE 754 32-bit" },
      { "language": "Maple", "native_support": "none", "notes": "Arbitrary precision, can specify 32-bit float" },
      { "language": "Julia", "native_support": "Float32", "version": "0.1+", "notes": "IEEE 754 single precision" },
      { "language": "Wolfram", "native_support": "none", "notes": "Arbitrary precision, can specify precision" },
      { "language": "R", "native_support": "none", "notes": "numeric is 64-bit, no native 32-bit" }
    ],
    "links": []
  },
  {
    "name": "FP64 (Double)",
    "category": "float",
    "bits_total": 64,
    "signed": true,
    "range": "±1.8e308",
    "values": "~18 quintillion",
    "structure": {
      "sign_bits": 1,
      "exponent_bits": 11,
      "mantissa_bits": 52,
      "bias": 1023,
      "specials": { "zeros": "true", "infinities": true, "nans": true, "subnormals": true }
    },
    "bit_split": "SEEEEEEEEEEEEMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM",
    "governance": { "type": "IEEE", "owner": "IEEE 754", "status": "standardized", "notes": "Double precision" },
    "language_support": [
      { "language": "C", "native_support": "double", "header": "<float.h>", "standard": "C89+", "notes": "Standard 64-bit float" },
      { "language": "C++", "native_support": "double", "header": "<cfloat>", "standard": "C++98+", "notes": "Standard double" },
      { "language": "C#", "native_support": "double", "namespace": "System", "version": ".NET 1.0+", "notes": "System.Double" },
      { "language": "Java", "native_support": "double", "version": "1.0+", "notes": "Always 64-bit IEEE 754" },
      { "language": "Go", "native_support": "float64", "package": "builtin", "version": "1.0+", "notes": "IEEE 754 64-bit" },
      { "language": "Rust", "native_support": "f64", "version": "1.0+", "notes": "Primitive IEEE 754 type" },
      { "language": "Python", "native_support": "float", "notes": "Default float is 64-bit IEEE 754" },
      { "language": "Haskell", "native_support": "Double", "module": "Prelude", "notes": "IEEE 754 double precision" },
      { "language": "JavaScript", "native_support": "Number", "notes": "All numbers are 64-bit IEEE 754" },
      { "language": "Excel Lambda", "native_support": "default", "notes": "All numbers are double precision" },
      { "language": "CUDA", "native_support": "double", "version": "all", "notes": "IEEE 754 64-bit" },
      { "language": "Maple", "native_support": "none", "notes": "Arbitrary precision, can specify 64-bit" },
      { "language": "Julia", "native_support": "Float64", "version": "0.1+", "notes": "Default Float type" },
      { "language": "Wolfram", "native_support": "none", "notes": "Arbitrary precision, can specify" },
      { "language": "R", "native_support": "numeric", "notes": "Default numeric type is 64-bit IEEE 754" }
    ],
    "links": []
  },
  {
    "name": "FP128 (Quadruple)",
    "category": "float",
    "bits_total": 128,
    "signed": true,
    "range": "±1.19e4932",
    "values": "~2^113",
    "structure": {
      "sign_bits": 1,
      "exponent_bits": 15,
      "mantissa_bits": 112,
      "bias": 16383,
      "specials": { "zeros": "true", "infinities": true, "nans": true, "subnormals": true }
    },
    "bit_split": "S + 15 E + 112 M",
    "governance": { "type": "IEEE", "owner": "IEEE 754-2008", "status": "standardized", "notes": "Quadruple precision" },
    "language_support": [
      { "language": "C", "native_support": "_Float128", "header": "none", "standard": "C23, GCC extension with libquadmath", "notes": "__float128 in GCC" },
      { "language": "C++", "native_support": "__float128", "header": "quadmath.h", "standard": "GCC extension", "notes": "Via libquadmath" },
      { "language": "C#", "native_support": "none", "notes": "No native FP128 support" },
      { "language": "Java", "native_support": "none", "notes": "No native support" },
      { "language": "Go", "native_support": "none", "notes": "No native support" },
      { "language": "Rust", "native_support": "none", "library": "f128", "notes": "Software emulation via crates" },
      { "language": "Python", "native_support": "none", "library": "mpmath", "notes": "Arbitrary precision can simulate" },
      { "language": "Haskell", "native_support": "none", "notes": "No native support" },
      { "language": "JavaScript", "native_support": "none", "notes": "No native support" },
      { "language": "Excel Lambda", "native_support": "none", "notes": "No support" },
      { "language": "CUDA", "native_support": "none", "notes": "No native FP128" },
      { "language": "Maple", "native_support": "none", "notes": "Arbitrary precision" },
      { "language": "Julia", "native_support": "none", "notes": "No native FP128, use BigFloat" },
      { "language": "Wolfram", "native_support": "none", "notes": "Arbitrary precision" },
      { "language": "R", "native_support": "none", "notes": "No FP128 support" }
    ],
    "links": []
  },
  {
    "name": "x87 Extended (80-bit)",
    "category": "float",
    "bits_total": 80,
    "signed": true,
    "range": "±1.19e4932",
    "values": "~2^64",
    "structure": {
      "sign_bits": 1,
      "exponent_bits": 15,
      "mantissa_bits": 64,
      "bias": 16383,
      "specials": { "zeros": "true", "infinities": true, "nans": true, "subnormals": true }
    },
    "bit_split": "S + 15 E + 1 I + 63 M (explicit leading bit)",
    "governance": { "type": "vendor", "owner": "Intel x87 FPU", "status": "legacy", "notes": "x87 internal precision" },
    "language_support": [
      { "language": "C", "native_support": "long double", "header": "<float.h>", "standard": "x86 specific", "notes": "Platform-dependent, 80-bit on x86" },
      { "language": "C++", "native_support": "long double", "header": "<cfloat>", "standard": "x86 specific", "notes": "Implementation-defined, 80-bit on x86" },
      { "language": "C#", "native_support": "none", "notes": "No 80-bit float support" },
      { "language": "Java", "native_support": "none", "notes": "No long double equivalent" },
      { "language": "Go", "native_support": "none", "notes": "No 80-bit float" },
      { "language": "Rust", "native_support": "none", "notes": "No 80-bit float support" },
      { "language": "Python", "native_support": "none", "notes": "float is always 64-bit" },
      { "language": "Haskell", "native_support": "none", "notes": "No 80-bit support" },
      { "language": "JavaScript", "native_support": "none", "notes": "No 80-bit support" },
      { "language": "Excel Lambda", "native_support": "none", "notes": "No support" },
      { "language": "CUDA", "native_support": "none", "notes": "No x87 support" },
      { "language": "Maple", "native_support": "none", "notes": "Arbitrary precision" },
      { "language": "Julia", "native_support": "none", "notes": "No 80-bit support" },
      { "language": "Wolfram", "native_support": "none", "notes": "Arbitrary precision" },
      { "language": "R", "native_support": "none", "notes": "No 80-bit support" }
    ],
    "links": []
  },
  {
    "name": "Decimal (.NET)",
    "category": "decimal",
    "bits_total": 128,
    "signed": true,
    "range": "±7.9e28",
    "values": "~10^28",
    "structure": {
      "sign_bits": 1,
      "exponent_bits": 5,
      "mantissa_bits": 96,
      "bias": null,
      "specials": { "zeros": "true", "infinities": false, "nans": false, "subnormals": false }
    },
    "bit_split": "96-bit integer coefficient + 5-bit scale + sign",
    "governance": { "type": "vendor", "owner": "Microsoft", "status": "standardized in .NET", "notes": "Base-10 decimal" },
    "language_support": [
      { "language": "C", "native_support": "none", "notes": "No native decimal type" },
      { "language": "C++", "native_support": "none", "notes": "No native decimal" },
      { "language": "C#", "native_support": "decimal", "namespace": "System", "version": ".NET 1.0+", "notes": "System.Decimal, 28-29 significant digits" },
      { "language": "Java", "native_support": "none", "library": "java.math.BigDecimal", "notes": "Arbitrary precision decimal" },
      { "language": "Go", "native_support": "none", "library": "shopspring/decimal", "notes": "Third-party decimal library" },
      { "language": "Rust", "native_support": "none", "library": "rust_decimal", "notes": "Third-party decimal crate" },
      { "language": "Python", "native_support": "none", "library": "decimal", "type": "Decimal", "notes": "Standard library arbitrary precision" },
      { "language": "Haskell", "native_support": "none", "library": "Decimal", "notes": "Via Decimal package" },
      { "language": "JavaScript", "native_support": "none", "library": "decimal.js", "notes": "Third-party library" },
      { "language": "Excel Lambda", "native_support": "none", "notes": "Uses binary float, not decimal" },
      { "language": "CUDA", "native_support": "none", "notes": "No decimal support" },
      { "language": "Maple", "native_support": "default", "notes": "Arbitrary precision decimal by default" },
      { "language": "Julia", "native_support": "none", "library": "DecFP.jl", "notes": "Decimal floating-point via package" },
      { "language": "Wolfram", "native_support": "default", "notes": "Arbitrary precision decimal by default" },
      { "language": "R", "native_support": "none", "notes": "No native decimal type" }
    ],
    "links": []
  },
  {
    "name": "BigInteger",
    "category": "integer",
    "bits_total": "variable",
    "signed": true,
    "range": "Unlimited (memory-bound)",
    "values": "Infinite",
    "structure": {
      "sign_bits": 1,
      "exponent_bits": null,
      "mantissa_bits": "variable",
      "bias": null,
      "specials": { "zeros": "true", "infinities": false, "nans": false, "subnormals": false }
    },
    "bit_split": "variable",
    "governance": { "type": "language-standard", "owner": "Multiple language standards", "status": "standardized", "notes": "Arbitrary precision integer" },
    "arbitrary_precision_config": {
      "precision_type": "unlimited_integer",
      "memory_scaling": "O(n) where n = number of digits",
      "computational_complexity": {
        "addition": "O(n)",
        "multiplication": "O(n log n) with advanced algorithms",
        "division": "O(n²)"
      }
    },
    "language_support": [
      { "language": "C", "native_support": "none", "library": "GMP", "type": "mpz_t", "notes": "Via GNU Multiple Precision library" },
      { "language": "C++", "native_support": "none", "library": "GMP or Boost", "type": "mpz_class or cpp_int", "notes": "Via libraries" },
      { "language": "C#", "native_support": "BigInteger", "namespace": "System.Numerics", "version": ".NET 4.0+", "notes": "Arbitrary precision integer" },
      { "language": "Java", "native_support": "BigInteger", "package": "java.math", "version": "1.1+", "notes": "Immutable arbitrary precision" },
      { "language": "Go", "native_support": "Int", "package": "math/big", "version": "1.0+", "notes": "big.Int for arbitrary precision" },
      { "language": "Rust", "native_support": "none", "library": "num-bigint", "type": "BigInt", "notes": "Via crate" },
      { "language": "Python", "native_support": "int", "version": "3.0+", "notes": "Built-in arbitrary precision (long in 2.x)" },
      { "language": "Haskell", "native_support": "Integer", "module": "Prelude", "notes": "Built-in arbitrary precision" },
      { "language": "JavaScript", "native_support": "BigInt", "version": "ES2020+", "notes": "Native arbitrary precision with 'n' suffix" },
      { "language": "Excel Lambda", "native_support": "none", "notes": "Limited to double precision" },
      { "language": "CUDA", "native_support": "none", "notes": "No arbitrary precision integers" },
      { "language": "Maple", "native_support": "default", "notes": "Default integer type is arbitrary precision" },
      { "language": "Julia", "native_support": "BigInt", "version": "0.1+", "notes": "Uses GMP internally" },
      { "language": "Wolfram", "native_support": "default", "notes": "Default integer type is arbitrary precision" },
      { "language": "R", "native_support": "none", "library": "gmp", "notes": "Via gmp package" }
    ],
    "links": []
  },
  {
    "name": "Rational",
    "category": "rational",
    "bits_total": "variable",
    "signed": true,
    "range": "All rationals (memory-bound)",
    "values": "Infinite",
    "structure": {
      "sign_bits": "inherited",
      "exponent_bits": null,
      "mantissa_bits": null,
      "bias": null,
      "specials": { "zeros": "true", "infinities": false, "nans": false, "subnormals": false }
    },
    "bit_split": "numerator/denominator pair",
    "governance": { "type": "language-standard", "owner": "Multiple implementations", "status": "language-specific", "notes": "Exact fraction representation" },
    "arbitrary_precision_config": {
      "precision_type": "unlimited_rational",
      "representation": "numerator/denominator (both arbitrary integers)",
      "memory_scaling": "O(n_num + n_den)",
      "computational_complexity": {
        "addition": "O(n²) with GCD",
        "multiplication": "O(n²)",
        "division": "O(n²)"
      }
    },
    "language_support": [
      { "language": "C", "native_support": "none", "library": "GMP", "type": "mpq_t", "notes": "Via GMP rationals" },
      { "language": "C++", "native_support": "none", "library": "Boost", "type": "rational<T>", "notes": "Boost.Rational" },
      { "language": "C#", "native_support": "none", "notes": "No native rational type" },
      { "language": "Java", "native_support": "none", "library": "Apache Commons", "notes": "Via commons-math" },
      { "language": "Go", "native_support": "Rat", "package": "math/big", "version": "1.0+", "notes": "big.Rat for rationals" },
      { "language": "Rust", "native_support": "none", "library": "num-rational", "type": "Ratio", "notes": "Via num crate" },
      { "language": "Python", "native_support": "Fraction", "module": "fractions", "version": "2.6+", "notes": "Standard library rational" },
      { "language": "Haskell", "native_support": "Ratio Integer", "module": "Data.Ratio", "notes": "Built-in, Rational is type alias" },
      { "language": "JavaScript", "native_support": "none", "library": "fraction.js", "notes": "Third-party library" },
      { "language": "Excel Lambda", "native_support": "none", "notes": "No rational support" },
      { "language": "CUDA", "native_support": "none", "notes": "No rational support" },
      { "language": "Maple", "native_support": "default", "notes": "Native exact rational arithmetic" },
      { "language": "Julia", "native_support": "Rational", "version": "0.1+", "notes": "Built-in rational type with // operator" },
      { "language": "Wolfram", "native_support": "default", "notes": "Native exact rational arithmetic" },
      { "language": "R", "native_support": "none", "notes": "No native rational type" }
    ],
    "links": []
  },
  {
    "name": "Arbitrary Float (MPFR)",
    "category": "float",
    "bits_total": "variable",
    "signed": true,
    "range": "Configurable",
    "values": "Depends on precision",
    "structure": {
      "sign_bits": 1,
      "exponent_bits": "configurable",
      "mantissa_bits": "configurable",
      "bias": "computed",
      "specials": { "zeros": "true", "infinities": true, "nans": true, "subnormals": true }
    },
    "bit_split": "S + variable E + variable M",
    "governance": { "type": "de-facto", "owner": "MPFR Development Team", "status": "widely adopted", "notes": "Arbitrary precision float" },
    "arbitrary_precision_config": {
      "precision_type": "configurable_float",
      "default_precision_bits": 53,
      "max_practical_precision": "millions of bits",
      "memory_scaling": "O(precision)",
      "computational_complexity": {
        "addition": "O(p)",
        "multiplication": "O(p log p)",
        "division": "O(p²)"
      }
    },
    "language_support": [
      { "language": "C", "native_support": "none", "library": "MPFR", "type": "mpfr_t", "notes": "Reference implementation" },
      { "language": "C++", "native_support": "none", "library": "Boost", "type": "mpfr_float", "notes": "Via Boost.Multiprecision" },
      { "language": "C#", "native_support": "none", "notes": "No native arbitrary float" },
      { "language": "Java", "native_support": "none", "library": "Apfloat", "notes": "Third-party arbitrary precision" },
      { "language": "Go", "native_support": "Float", "package": "math/big", "version": "1.5+", "notes": "big.Float for arbitrary precision" },
      { "language": "Rust", "native_support": "none", "library": "rug", "type": "Float", "notes": "Rug crate wraps MPFR" },
      { "language": "Python", "native_support": "none", "library": "mpmath", "type": "mpf", "notes": "Arbitrary precision float" },
      { "language": "Haskell", "native_support": "none", "library": "hmpfr", "notes": "MPFR bindings" },
      { "language": "JavaScript", "native_support": "none", "library": "decimal.js", "notes": "Configurable precision decimal" },
      { "language": "Excel Lambda", "native_support": "none", "notes": "No arbitrary precision" },
      { "language": "CUDA", "native_support": "none", "notes": "Fixed precision only" },
      { "language": "Maple", "native_support": "default", "notes": "Arbitrary precision by default" },
      { "language": "Julia", "native_support": "BigFloat", "version": "0.1+", "notes": "Uses MPFR, configurable precision" },
      { "language": "Wolfram", "native_support": "default", "notes": "Arbitrary precision with configurable WorkingPrecision" },
      { "language": "R", "native_support": "none", "library": "Rmpfr", "notes": "Via Rmpfr package" }
    ],
    "links": []
  },
  {
    "name": "Complex (Float)",
    "category": "float",
    "bits_total": 64,
    "signed": true,
    "range": "±3.4e38 (real and imaginary)",
    "values": "~4.3B × 4.3B",
    "structure": {
      "sign_bits": "2 (one per component)",
      "exponent_bits": "16 (8 per component)",
      "mantissa_bits": "46 (23 per component)",
      "bias": 127,
      "specials": { "zeros": "true", "infinities": "true", "nans": "true", "subnormals": "true" }
    },
    "bit_split": "real: FP32, imaginary: FP32",
    "governance": { "type": "IEEE", "owner": "IEEE 754 + language standards", "status": "standardized", "notes": "Pair of FP32" },
    "language_support": [
      { "language": "C", "native_support": "float complex", "header": "<complex.h>", "standard": "C99+", "notes": "Complex float type" },
      { "language": "C++", "native_support": "std::complex<float>", "header": "<complex>", "standard": "C++98+", "notes": "Template class" },
      { "language": "C#", "native_support": "none", "library": "System.Numerics", "type": "Complex", "notes": "Uses double precision, no float complex" },
      { "language": "Java", "native_support": "none", "library": "Apache Commons", "notes": "Via commons-math Complex" },
      { "language": "Go", "native_support": "complex64", "package": "builtin", "version": "1.0+", "notes": "Two float32 components" },
      { "language": "Rust", "native_support": "none", "library": "num-complex", "type": "Complex<f32>", "notes": "Via num crate" },
      { "language": "Python", "native_support": "none", "library": "NumPy", "type": "np.complex64", "notes": "Two float32" },
      { "language": "Haskell", "native_support": "none", "library": "Data.Complex", "type": "Complex Float", "notes": "Via Data.Complex" },
      { "language": "JavaScript", "native_support": "none", "library": "complex.js", "notes": "Third-party library" },
      { "language": "Excel Lambda", "native_support": "none", "notes": "No complex number support" },
      { "language": "CUDA", "native_support": "cuFloatComplex", "header": "<cuComplex.h>", "notes": "Native complex float" },
      { "language": "Maple", "native_support": "default", "notes": "Native complex arithmetic" },
      { "language": "Julia", "native_support": "ComplexF32", "version": "0.1+", "notes": "Complex{Float32}" },
      { "language": "Wolfram", "native_support": "default", "notes": "Native complex numbers" },
      { "language": "R", "native_support": "complex", "notes": "Built-in complex type (double precision)" }
    ],
    "links": []
  },
  {
    "name": "Complex (Double)",
    "category": "float",
    "bits_total": 128,
    "signed": true,
    "range": "±1.8e308 (real and imaginary)",
    "values": "~18Q × 18Q",
    "structure": {
      "sign_bits": "2",
      "exponent_bits": "22 (11 per component)",
      "mantissa_bits": "104 (52 per component)",
      "bias": 1023,
      "specials": { "zeros": "true", "infinities": "true", "nans": "true", "subnormals": "true" }
    },
    "bit_split": "real: FP64, imaginary: FP64",
    "governance": { "type": "IEEE", "owner": "IEEE 754 + language standards", "status": "standardized", "notes": "Pair of FP64" },
    "language_support": [
      { "language": "C", "native_support": "double complex", "header": "<complex.h>", "standard": "C99+", "notes": "Complex double type" },
      { "language": "C++", "native_support": "std::complex<double>", "header": "<complex>", "standard": "C++98+", "notes": "Template class" },
      { "language": "C#", "native_support": "Complex", "namespace": "System.Numerics", "version": ".NET 4.0+", "notes": "Two double components" },
      { "language": "Java", "native_support": "none", "library": "Apache Commons", "notes": "commons-math Complex uses double" },
      { "language": "Go", "native_support": "complex128", "package": "builtin", "version": "1.0+", "notes": "Two float64 components" },
      { "language": "Rust", "native_support": "none", "library": "num-complex", "type": "Complex<f64>", "notes": "Via num crate" },
      { "language": "Python", "native_support": "complex", "notes": "Built-in complex with two doubles" },
      { "language": "Haskell", "native_support": "none", "library": "Data.Complex", "type": "Complex Double", "notes": "Via Data.Complex" },
      { "language": "JavaScript", "native_support": "none", "library": "complex.js", "notes": "Third-party" },
      { "language": "Excel Lambda", "native_support": "none", "notes": "No complex support" },
      { "language": "CUDA", "native_support": "cuDoubleComplex", "header": "<cuComplex.h>", "notes": "Native complex double" },
      { "language": "Maple", "native_support": "default", "notes": "Native complex arithmetic" },
      { "language": "Julia", "native_support": "ComplexF64", "version": "0.1+", "notes": "Complex{Float64}, default Complex" },
      { "language": "Wolfram", "native_support": "default", "notes": "Native complex numbers" },
      { "language": "R", "native_support": "complex", "notes": "Built-in, two doubles" }
    ],
    "links": []
  }
]